{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorkerRegistration.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","aria-label","Scroll","props","style","overflow","border","height","background","color1","color2","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","App","setColor","bind","setColor1","onRequestRobots","event","target","value","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","payload","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","errorState","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d2380100.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('cardList');\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  console.log('searchBox');\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n        aria-label='Search robots'\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflow: \"scroll\",\n        border: \"5px solid black\",\n        height: \"800px\",\n        background: `linear-gradient(to right, ${props.color1}, ${props.color2})`,\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n    };\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(nextProps, nextState);\n    if (this.state.count !== nextProps.count) return true;\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState((state) => {\n      return { count: state.count + 1 };\n    });\n  };\n  render() {\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        UpdateCount: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  //   shouldComponentUpdate(nextProps, nextState) {\n  //     return false;\n  //   }\n  render() {\n    console.log('header');\n\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton color={'red'} />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport './App.css';\n\nimport { requestRobots, setSearchField } from '../actions';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color1: '',\n      color2: '',\n    };\n    this.setColor = this.setColor.bind(this);\n    this.setColor1 = this.setColor1.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  setColor(event) {\n    this.setState({ color1: event.target.value });\n  }\n\n  setColor1(event) {\n    this.setState({ color2: event.target.value });\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <label>First Color</label>\n        <input\n          id='color1'\n          type='color'\n          name='color1'\n          onChange={this.setColor}\n          value='#ffffff'\n        />\n        <label>Second Color</label>\n        <input\n          id='color2'\n          type='color'\n          name='color1'\n          onChange={this.setColor1}\n          value='#ffffff'\n        />\n        <Scroll color1={this.state.color1} color2={this.state.color2}>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING,\n  });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) =>\n      dispatch({\n        type: REQUEST_ROBOTS_SUCCESS,\n        payload: data,\n      })\n    )\n    .catch((err) =>\n      dispatch({\n        type: REQUEST_ROBOTS_FAILED,\n        payload: err,\n      })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: true,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        isPending: false,\n        robots: action.payload,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        isPending: false,\n        errorState: action.payload,\n      });\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}